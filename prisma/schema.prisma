generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  password          String
  role              String
  active            Boolean   @default(true)
  lastLogin         DateTime?
  resetToken        String?
  resetTokenExpires DateTime?
  clubId            Int?      // Foreign key to Club (nullable for admin users)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  club              Club?     @relation(fields: [clubId], references: [id], onDelete: SetNull)
  observedCompetitions Competition[] @relation("CompetitionObserver")
  
  @@index([clubId])
  @@map("users")
}

model Club {
  id               Int       @id @default(autoincrement())
  clubName         String
  affiliationNumber String
  uniqueNumber     String    @unique  // TDKA/(region abbrev)/TDKA01 format
  regionId         Int       // Foreign key to Region
  city             String
  address          String
  mobile          String
  email            String
  password         String
  
  // President details
  presidentName     String?
  presidentMobile   String?
  presidentEmail    String?
  presidentAadhar   String?
  
  // Secretary details
  secretaryName    String?
  secretaryMobile  String?
  secretaryEmail   String?
  secretaryAadhar  String?
  
  // Treasurer details
  treasurerName    String?
  treasurerMobile  String?
  treasurerEmail   String?
  treasurerAadhar  String?
  
  // Coach details
  coachName        String?
  coachMobile      String?
  coachEmail       String?
  coachAadhar      String?
  
  // Manager details
  managerName      String?
  managerMobile    String?
  managerEmail     String?
  managerAadhar    String?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  region           Region    @relation(fields: [regionId], references: [id], onDelete: Restrict)
  competitions     Competition[]
  players          Player[]  // One club can have many players
  users            User[]    // One club can have many users
  competitionRegistrations CompetitionRegistration[]
  
  @@index([regionId])
}

model Group{
  id               Int       @id @default(autoincrement())
  groupName        String
  gender           String     
  age              String    
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  competitions     Competition[]
  players          Player[]
  @@map("groups")
}

model Taluka {
  id               Int       @id @default(autoincrement())
  number           Int       @unique // 2 digit number for that taluka
  abbreviation     String    @unique // abbreviation of that taluka
  talukaName       String    // taluka name
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  regions          Region[]  // One taluka can have many regions
  
  @@map("talukas")
}

model Region {
  id               Int       @id @default(autoincrement())
  number           Int       @unique // 2 digit number for that region
  abbreviation     String    @unique // abbreviation of that region
  regionName       String    // region name
  talukaId         Int       // Foreign key to Taluka
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  taluka           Taluka    @relation(fields: [talukaId], references: [id], onDelete: Cascade)
  clubs            Club[]    // One region can have many clubs
  
  @@index([talukaId])
  @@map("regions")
}

model Competition{
  id               Int       @id @default(autoincrement())
  competitionName  String
  maxPlayers       Int
  fromDate         String
  toDate           String
  age              String
  lastEntryDate    String
  ageEligibilityDate String?  // Reference date for age calculations
  rules            String?   @db.Text  // Competition rules as rich text
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  groups           Group[]
  clubs            Club[]
  registrations    CompetitionRegistration[]
  
  // Observer assigned to this competition (only one observer per competition)
  observerId       Int?
  observer         User?     @relation("CompetitionObserver", fields: [observerId], references: [id], onDelete: SetNull)
}

model Player {
  id               Int       @id @default(autoincrement())
  uniqueIdNumber   String    @unique
  firstName        String
  middleName       String?
  lastName         String
  motherName       String?
  dateOfBirth      DateTime
  position         String?
  address          String
  mobile           String
  aadharNumber     String    @unique
  profileImage     String?   // Path to profile image
  aadharVerified   Boolean   @default(false)
  isSuspended      Boolean   @default(false)
  clubId           Int?      // Foreign key to Club (nullable for players without clubs)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  groups           Group[]
  club             Club?     @relation(fields: [clubId], references: [id], onDelete: SetNull)
  competitionRegistrations CompetitionRegistration[]

  @@index([clubId])
  @@map("players")
}

model CompetitionRegistration {
  id               Int       @id @default(autoincrement())
  competitionId    Int       // Foreign key to Competition
  playerId         Int       // Foreign key to Player
  clubId           Int       // Foreign key to Club
  registeredBy     String    // Email of the user who registered the player
  status           String    @default("registered") // registered, confirmed, cancelled
  registrationDate DateTime  @default(now())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  competition      Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  player           Player      @relation(fields: [playerId], references: [id], onDelete: Cascade)
  club             Club        @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  @@unique([competitionId, playerId]) // Prevent duplicate registrations
  @@index([competitionId])
  @@index([playerId])
  @@index([clubId])
  @@map("competition_registrations")
}

